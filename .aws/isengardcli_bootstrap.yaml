AWSTemplateFormatVersion: 2010-09-09
Description: IsengardCLI Boostrap 

Resources:
  S3BlockPublicAccess:
    Type: "Custom::S3BlockPublicAccess"
    Properties:
      BlockPublicAcls: true
      BlockPublicPolicy: true
      IgnorePublicAcls: true
      RestrictPublicBuckets: true
      ServiceToken:
        Fn::GetAtt:
          - "S3BlockPublicAccessLambda"
          - "Arn"
  S3BlockPublicAccessLambdaRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: "s3inline"
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "s3:PutAccountPublicAccessBlock"
                  - "s3:GetAccountPublicAccessBlock"
                Resource: "*"
  S3BlockPublicAccessLambda:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        ZipFile: |
          'use strict';
          const AWS = require('aws-sdk');
          const s3control = new AWS.S3Control();
          const SUCCESS = "SUCCESS";
          const FAILED = "FAILED";

          exports.handler = (event, context, cb) => {

            const account_id = JSON.stringify(context.invokedFunctionArn).split(':')[4]
            console.log('Invoke:', JSON.stringify(event));
            const done = (err, data) => {
              if (err) {
                console.log('Error: ', err);
                send(event, context, FAILED, {}, 'CustomResourcePhysicalID');
              } else {
                send(event, context, SUCCESS, {}, 'CustomResourcePhysicalID');
              }
            };

            if ( event.RequestType === 'Delete') {
              s3control.deletePublicAccessBlock({AccountId: account_id}, done)

            } else if (event.RequestType === 'Create' || event.RequestType === 'Update') {
              s3control.putPublicAccessBlock({
                  AccountId: account_id,
                  PublicAccessBlockConfiguration:{
                      BlockPublicAcls: (event.ResourceProperties.BlockPublicAcls === 'true'),
                      BlockPublicPolicy: (event.ResourceProperties.BlockPublicPolicy=== 'true'),
                      IgnorePublicAcls: (event.ResourceProperties.IgnorePublicAcls=== 'true'),
                      RestrictPublicBuckets: (event.ResourceProperties.RestrictPublicBuckets=== 'true')
                  }
                  }, done);
            } else {
              cb(new Error('unsupported RequestType: ', event.RequestType));
              send(event, context, FAILED, {}, 'CustomResourcePhysicalID');
            }
          };

          const send = function(event, context, responseStatus, responseData, physicalResourceId, noEcho) {

              var responseBody = JSON.stringify({
                  Status: responseStatus,
                  Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                  PhysicalResourceId: physicalResourceId || context.logStreamName,
                  StackId: event.StackId,
                  RequestId: event.RequestId,
                  LogicalResourceId: event.LogicalResourceId,
                  NoEcho: noEcho || false,
                  Data: responseData
              });

              console.log("Response body:\n", responseBody);

              var https = require("https");
              var url = require("url");

              var parsedUrl = url.parse(event.ResponseURL);
              var options = {
                  hostname: parsedUrl.hostname,
                  port: 443,
                  path: parsedUrl.path,
                  method: "PUT",
                  headers: {
                      "content-type": "",
                      "content-length": responseBody.length
                  }
              };

              var request = https.request(options, function(response) {
                  console.log("Status code: " + response.statusCode);
                  console.log("Status message: " + response.statusMessage);
                  context.done();
              });

              request.on("error", function(error) {
                  console.log("send(..) failed executing https.request(..): " + error);
                  context.done();
              });

              request.write(responseBody);
              request.end();
          };
      Handler: "index.handler"
      MemorySize: 128
      Role:
        Fn::GetAtt:
          - "S3BlockPublicAccessLambdaRole"
          - "Arn"
      Runtime: "nodejs14.x"
      Timeout: 120
