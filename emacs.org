#+title Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/init.el :mkdirp yes

* General Notes

This section is for general notes that do not get compiled into the init.el file.
 
** Change where new windows appear 

#+begin_src emacs-lisp :tangle no 

  ;; To make windows split to the side set nil and 0
  (setq split-height-threshold 80) ; 80 default. Set to nil to make windows open to the side

  (setq split-width-threshold 160) ; 160 default. Set to 0 to make windows open to the side

#+end_src

* Package System Setup

** Initial Warning

Adds a note to the top of the init.el file that it is generated by this file

#+begin_src emacs-lisp

  ;; NOTE: init.el is now generated from Emacs.org.  Please edit that file
  ;;       in Emacs and init.el will be generated automatically!

#+end_src

** Basic Configuration

*** Change user directory

#+begin_src emacs-lisp

  ;; Change the user-emacs-directory to keep unwanted things out of ~/.emacs.d
  (setq user-emacs-directory (expand-file-name "~/.cache/emacs/")
        url-history-file (expand-file-name "url/history" user-emacs-directory))

#+end_src

*** Package installation location
*NOTE*: This must be before (require 'package) is set.

#+begin_src emacs-lisp

  ;; Sets the directory used to install packages
  (setq package-user-dir (expand-file-name "packages/" user-emacs-directory))

#+end_src

*** General configurations

This is the basic configuration of the package manager. 

#+begin_src emacs-lisp

  (add-to-list 'load-path "/Users/nikirby/.cache/emacs/packages/")
  
  (package-initialize)

  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (unless package-archive-contents
   (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  ;; Packages will download when evaluated. 
  (require 'use-package)
  (setq use-package-always-ensure t)

#+end_src

* General Emacs Configuration 
These configurations are for general Emacs setup.

** Startup Configuration

#+begin_src emacs-lisp

  ;; Disables the initial startup screen
  (setq inhibit-startup-message t)

#+end_src

** Default visual UI elements 

Fringe Mode: https://www.gnu.org/software/emacs/manual/html_node/emacs/Fringes.html

#+begin_src emacs-lisp 

  ;; Configure the general UI

  (scroll-bar-mode -1)        ; Disable visible scrollbar
  (tool-bar-mode -1)          ; Disable the toolbar
  (tooltip-mode -1)           ; Disable tooltips
  (set-fringe-mode 10)        ; Give some breathing room
  (menu-bar-mode -1)          ; Disable the menu bar

#+end_src

** Notifications 

#+begin_src emacs-lisp

  ;; Disable bell sound
  (setq ring-bell-function 'ignore)

#+end_src

** Clean .emacs.d

*** Configure no-littering

https://github.com/emacscollective/no-littering

#+begin_src emacs-lisp

  ;; Configure no-littering defaults before loading
  (setq no-littering-etc-directory (expand-file-name "etc/" user-emacs-directory)
        no-littering-var-directory (expand-file-name "var/" user-emacs-directory))

  ;; Use no-littering to automatically set common paths to the new user-emacs-directory
  (require 'no-littering)

#+end_src

*** Change where customizations are stored

https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Customizations.html

#+begin_src emacs-lisp

  ;; Moves customizations to custom.el
  (setq custom-file (no-littering-expand-etc-file-name "custom.el"))

#+end_src

*** Auto-save location

#+begin_src emacs-lisp

  ;; Moves the auto save files
  (setq auto-save-file-name-transforms `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))

#+end_src

* UX Configuration

** Font configurations

#+begin_src emacs-lisp

  ;; Set font size
  (set-face-attribute 'default nil :font "Fira Code Retina" :height 200)

  ;; Set the fixed pitch face
  (set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height 200)

  ;; Set the variable pitch face
  (set-face-attribute 'variable-pitch nil :font "Helvetica" :height 200)

#+end_src

** All the icons

#+begin_src emacs-lisp

  (use-package all-the-icons)

#+end_src

** Line number configuration

#+begin_src emacs-lisp

  ;; configure line numbers
  (column-number-mode)
  (global-display-line-numbers-mode t)
  (setq display-line-numbers-type 'relative)


  ;; Disable line numbers for some modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))

#+end_src

** Themes

https://github.com/doomemacs/themes

#+begin_src emacs-lisp

  (use-package doom-themes
    :config
    ;; Global settings (defaults)
    (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
          doom-themes-enable-italic t) ; if nil, italics is universally disabled
    (load-theme 'doom-palenight t)

    ;; Enable flashing mode-line on errors
    (doom-themes-visual-bell-config)
    ;; Enable custom neotree theme (all-the-icons must be installed!)
    (doom-themes-neotree-config)
    ;; or for treemacs users
    (setq doom-themes-treemacs-theme "doom-colors") ; use "doom-colors" for less minimal icon theme
    (doom-themes-treemacs-config)
    ;; Corrects (and improves) org-mode's native fontification.
    (doom-themes-org-config))

#+end_src

** Modeline

https://github.com/seagle0128/doom-modeline

#+begin_src emacs-lisp

  (use-package doom-modeline
  
    :init (doom-modeline-mode 1)
    :config
    (setq doom-modeline-modal-icon nil))

#+end_src

** Which key

https://github.com/justbur/emacs-which-key

#+begin_src emacs-lisp

  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode
    :config
    (setq which-key-idle-delay 0.2))

#+end_src

** Ivy

Ivy User Manual (swiper is the url, but is the manual for Ivy): 
https://oremacs.com/swiper/

*** Swiper

#+begin_src emacs-lisp

  (use-package swiper)

#+end_src

*** Ivy

#+begin_src emacs-lisp

  (use-package ivy
    :diminish
    :bind (("C-s" . swiper)
           :map ivy-minibuffer-map
           ("TAB" . ivy-alt-done)	
           ("C-l" . ivy-alt-done)
           ("C-j" . ivy-next-line)
           ("C-k" . ivy-previous-line)
           :map ivy-switch-buffer-map
           ("C-k" . ivy-previous-line)
           ("C-l" . ivy-done)
           ("C-d" . ivy-switch-buffer-kill)
           :map ivy-reverse-i-search-map
           ("C-k" . ivy-previous-line)
           ("C-d" . ivy-reverse-i-search-kill))
    :config
    (ivy-mode 1))
  
#+end_src

*** Ivy-rich

https://github.com/Yevgnen/ivy-rich

#+begin_src emacs-lisp

  (use-package ivy-rich
    :init
    (ivy-rich-mode 1)
    :config
    (setq ivy-format-function #'ivy-format-function-line)
    (setq ivy-rich-display-transformers-list
          (plist-put ivy-rich-display-transformers-list
                     'ivy-switch-buffer
                     '(:columns
                       ((ivy-rich-candidate (:width 40))
                        (ivy-rich-switch-buffer-indicators (:width 4 :face error :align right)); return the buffer indicators
                        (ivy-rich-switch-buffer-major-mode (:width 12 :face warning))          ; return the major mode info
                        (ivy-rich-switch-buffer-project (:width 15 :face success))             ; return project name using `projectile'
                        (ivy-rich-switch-buffer-path (:width (lambda (x) (ivy-rich-switch-buffer-shorten-path x (ivy-rich-minibuffer-width 0.3))))))  ; return file path relative to project root or `default-directory' if project is nil
                       :predicate
                       (lambda (cand)
                         (if-let ((buffer (get-buffer cand)))
                             ;; Don't mess with EXWM buffers
                             (with-current-buffer buffer
                               (not (derived-mode-p 'exwm-mode)))))))))
 

#+end_src

** Counsel

#+begin_src emacs-lisp

  (use-package counsel
    :bind (("M-x" . counsel-M-x)
           ("C-x b" . counsel-ibuffer)
           ("C-x C-f" . counsel-find-file)
           ("C-M-j" . counsel-switch-buffer)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history))
    :config
    (setq ivy-initial-inputs-alist nil)) ;; Don't start searches with ^ automatically

#+end_src

** Helpful

https://github.com/Wilfred/helpful

#+begin_src emacs-lisp

  (use-package helpful
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))

#+end_src

* Keyboard Configurations

** General package
https://github.com/noctuid/general.el

#+begin_src emacs-lisp

  (use-package general
    :config
    (general-evil-setup t)

    (general-create-definer kirby/leader-keys
      :keymaps '(normal insert visual emacs)
      :prefix "SPC"
      :global-prefix "C-SPC"))

#+end_src

** Custom Leader Key configurations

*** Toggles

#+begin_src emacs-lisp

  (kirby/leader-keys
    "t"  '(:ignore t :which-key "Toggles")
    "tr" '(auto-revert-mode :which-key "Auto-reload file")
    "to" '(org-mode :which-key "Toggle Org Mode"))

#+end_src

** Key remapping

#+begin_src emacs-lisp

  ;; Make ESC quit prompts
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)

#+end_src

** Hydra

https://github.com/abo-abo/hydra

#+begin_src emacs-lisp

  (use-package hydra)

  (defhydra hydra-text-scale (:timeout 5)
    "scale text"
    ("j" text-scale-increase "in")
    ("k" text-scale-decrease "out")
    ("f" nil "finished" :exit t))

  (kirby/leader-keys
    "ts" '(hydra-text-scale/body :which-key "scale text"))

#+end_src

** Evil

https://evil.readthedocs.io/en/latest/index.html

#+begin_src emacs-lisp

  ;; Modes that should start with evil disabled. C-z to activate evil.
  (defun kirby/evil-hook ()
    (dolist (mode '(eshell-mode
                    git-rebase-mode
                    term-mode))
      (add-to-list 'evil-emacs-state-modes mode)))

#+end_src

#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-want-C-u-scroll t)
    (setq evil-want-C-i-jump nil)
    ;;:hook (evil-mode . kirby/evil-hook)
    :config
    (evil-mode 1)
    (define-key evil-insert-state-map (kbd "C-g") 'evil-normal-state)

    ;; Use visual line motions even outside of visual-line-mode buffers
    (evil-global-set-key 'motion "j" 'evil-next-visual-line)
    (evil-global-set-key 'motion "k" 'evil-previous-visual-line)
    ;; Makes horizontal movement cross lines
    (setq-default evil-cross-lines t)

    (evil-set-initial-state 'messages-buffer-mode 'normal)
    (evil-set-initial-state 'dashboard-mode 'normal)
    ;; Color the evil tag
    (setq evil-normal-state-tag   (propertize "N" 'face '((:background "yellow1"     :foreground "black")))
          evil-emacs-state-tag    (propertize "E" 'face '((:background "dark red"    :foreground "black")))
          evil-insert-state-tag   (propertize "I" 'face '((:background "light green" :foreground "black")))
          evil-replace-state-tag  (propertize "R" 'face '((:background "chocolate"   :foreground "black")))
          evil-motion-state-tag   (propertize "M" 'face '((:background "plum3"       :foreground "black")))
          evil-visual-state-tag   (propertize "V" 'face '((:background "gray"        :foreground "black")))
          evil-operator-state-tag (propertize "O" 'face '((:background "sandy brown" :foreground "black")))))

#+end_src

** Evil collection

https://github.com/emacs-evil/evil-collection

#+begin_src emacs-lisp

  (use-package evil-collection
    :after evil
    :config
    (evil-collection-init))

#+end_src

* Org Mode

https://orgmode.org

** Basic setup

#+begin_src emacs-lisp

  (defun kirby/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil))

  (use-package org
    :hook (org-mode . kirby/org-mode-setup)
    :config
    (setq org-ellipsis " ▾"))

  ;; Replace list hyphen with dot
  (font-lock-add-keywords 'org-mode
                          '(("^ *\\([-]\\) "
                            (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
  
  ;; Make sure org-indent face is available
  (require 'org-indent)

#+end_src

** Center Org buffers

Centers the org buffers. Disabling for now, will revist later

#+begin_src emacs-lisp :tangle no

  (defun kirby/org-mode-visual-fill ()
    (setq visual-fill-column-width 100
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . kirby/org-mode-visual-fill))

#+end_src

** Org bullet setups

Page where I copied the encircled numbers from:
https://www.webnots.com/alt-code-shortcuts-for-encircled-numbers/

#+begin_src emacs-lisp

  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("➀" "➁" "➂" "➃" "➄" "➅" "➆" "➇" "➈" "➉")))

#+end_src

** Org face configuration

#+begin_src emacs-lisp

  (require 'org-faces)

    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.0)
                    (org-level-6 . 1.0)
                    (org-level-7 . 1.0)
                    (org-level-8 . 1.0)))
        (set-face-attribute (car face) nil :font "Fira Code Retina" :weight 'regular :height (cdr face)))

  ;; Run describe-face and search for org to find other faces that might need fixed pitch
  ;; Ensure that anything that should be fixed-pitch in Org files appears that way
  (set-face-attribute 'org-block nil           :foreground nil :inherit 'fixed-pitch)
  (set-face-attribute 'org-code nil            :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-table nil           :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-indent nil          :inherit '(org-hide fixed-pitch))
  (set-face-attribute 'org-verbatim nil        :inherit '(shadow fixed-pitch))
  (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-meta-line nil       :inherit '(font-lock-comment-face fixed-pitch))
  (set-face-attribute 'org-checkbox nil        :inherit 'fixed-pitch)

#+end_src

** Org agenda

Disabled until I get more time to work with Org agenda mode. Configurations put here for reminders

#+begin_src emacs-lisp :tangle no
;; For more information on the following items: https://github.com/daviwil/emacs-from-scratch/blob/master/show-notes/Emacs-06.org
;; Set org-agenda file locations and name
;; (setq org-directory "~/Projects/Code/emacs-from-scratch/OrgFiles")
;; (setq org-agenda-files '("Tasks.org" "Birthdays.org" "Habits.org"))

;; If you only want to see the agenda for today
;; (setq org-agenda-span 'day)

;; Enables logs of closed and scheduled tasks (shows hours of the day)
;; (setq org-agenda-start-with-log-mode t)

;; org-agenda will track closing time when task

;; (setq org-log-done 'time)

;; Sets the log drawer to be collapsible
;; (setq org-log-into-drawer t)

#+end_src

** Org babel

Languages available to org-babel: https://orgmode.org/worg/org-contrib/babel/languages/index.html

#+begin_src emacs-lisp

  ;; enables org babel
  (org-babel-do-load-languages
    'org-babel-load-languages
    '((emacs-lisp . t)   ; Enables emacs-lisp language
      (python . t)))     ; Enables python language

  ;; Enabled config file configuration in org babel
  (push '("conf-unix" . conf-unix) org-src-lang-modes)


  ;; Allows evaluation of code blocks without prompts
  (setq org-confirm-babel-evaluate nil)

#+end_src

** Structure Templates

https://orgmode.org/manual/Structure-Templates.html

#+begin_src emacs-lisp

  ;; Enables tab completion of "<sh" to a shell code block. Same for other characters
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src shell"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** Auto-tangle configuration files

#+begin_src emacs-lisp

  ;; Automatically tangle our Emacs.org config file when we save it
  (defun kirby/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/emacs.org")) 
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle)
        (load-file user-init-file)))
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/system.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'kirby/org-babel-tangle-config)))


#+end_src

* Development
** Projectile
*** Main Projectile

https://projectile.mx/

#+begin_src emacs-lisp

  (use-package projectile
    :diminish projectile-mode
    :config (projectile-mode)
    :custom ((projecile-completion-system `ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    (when (file-directory-p "~/source_code")
      (setq projectile-project-search-path '("~/source_code")))
    (setq projectile-switch-project-action #'projectile-dired))

#+end_src

*** Projectile Counsel

#+begin_src emacs-lisp

  (use-package counsel-projectile
   :after projectile
   :config
   (counsel-projectile-mode))

#+end_src

** Magit

*** Main Magit

https://magit.vc/

#+begin_src emacs-lisp

  (use-package magit
    :commands (magit-status magit-get-current-branch)
    :custom
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))

#+end_src

*** Forge

#+begin_src emacs-lisp

    (use-package forge
      :init
      (setq auth-sources '("~/.authinfo")))

#+end_src

** Rainbow-delimters

https://github.com/Fanael/rainbow-delimiters

#+begin_src emacs-lisp

  ;; enable rainbow-delimiters
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))

#+end_src

** Development Configuration

*** Language Server Protocol 

**** Functions

***** Enable Breadcrumbs

#+begin_src emacs-lisp

  (defun kirby/lsp-mode-setup ()
    (setq lsp-headerline-breadcrumb-segments '(path-up-to-project file symbols))
    (lsp-headerline-breadcrumb-mode))
  
#+end_src

**** Enable LSP

https://emacs-lsp.github.io/lsp-mode/

#+begin_src emacs-lisp

  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :hook (lsp-mode . kirby/lsp-mode-setup)
    :init
    (setq lsp-keymap-prefix "SPC l") 
    :config
    (lsp-enable-which-key-integration t))

#+end_src

**** Company Mode completions

https://company-mode.github.io/

#+begin_src emacs-lisp

  (use-package company
    :after lsp-mode
    :hook (lsp-mode . company-mode)
    :bind (:map company-active-map
           ("<tab>" . company-complete-selection))
          (:map lsp-mode-map
           ("<tab>" . company-indent-or-complete-common))
    :custom
    (company-minimum-prefix-length 1) ; Minimum characters before completions show up
    (company-idle-delay 0.0))         ; Delay before completion shows up

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

**** LSP UI Mode

https://emacs-lsp.github.io/lsp-ui/

#+begin_src emacs-lisp

  (use-package lsp-ui
    :after lsp-mode
    :hook (lsp-mode . lsp-ui-mode))

#+end_src


*** Python
This will be for configurating pythong eventually. Disabled for now to prevent causing issues

#+begin_src emacs-lisp :tangle no

  (require 'virtualenvwrapper)
  (venv-initialize-interactive-shells) ; if you want interactive shell support
  (venv-initialize-eshell)             ; if you want eshell support
  (setq venv-location "~/.pyenv/versions")

#+end_src

